/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.io.File;
import java.io.FileWriter;
import test.TestMic;
import tr.net.deniz.*;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import javax.swing.*;
import java.util.*;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author yukseldeniz
 */
public class MainFrame extends javax.swing.JFrame {

    TestMic mic = new TestMic();
    long[] beats = new long[1000];
    long totalBeats = 0;
    int beatCount = 0;

    private static PipedOutputStream fourierOut;
    private static PipedInputStream fourierIn;

    private static PipedOutputStream tabTransOut;
    private static PipedInputStream tabTransIn;

    private static PipedOutputStream sonographOut;
    private static PipedInputStream sonographIn;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jSeparator7 = new javax.swing.JSeparator();
        jToolBar1 = new javax.swing.JToolBar();
        tapButton = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        bpmField = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        verticalCheckBox = new javax.swing.JCheckBox();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        cepstrumCheckBox = new javax.swing.JCheckBox();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        startButton = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        stopButton = new javax.swing.JButton();
        jSeparator9 = new javax.swing.JToolBar.Separator();
        testRecordButton = new javax.swing.JButton();
        jSeparator6 = new javax.swing.JToolBar.Separator();
        clickedNoteLabel = new javax.swing.JLabel();
        jSeparator8 = new javax.swing.JToolBar.Separator();
        coordinateLabel = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        sonographLabel = new javax.swing.JLabel();
        tabPanel = new javax.swing.JPanel();
        tabScrollPane = new javax.swing.JScrollPane();
        tabTextArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1920, 800));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                formComponentResized(evt);
            }
        });

        jToolBar1.setRollover(true);

        tapButton.setText("tap!");
        tapButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tapButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(tapButton);
        jToolBar1.add(jSeparator1);

        jLabel1.setText("bpm");
        jToolBar1.add(jLabel1);
        jToolBar1.add(jSeparator2);

        bpmField.setText("60");
        bpmField.setMaximumSize(new java.awt.Dimension(50, 50));
        bpmField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bpmFieldActionPerformed(evt);
            }
        });
        jToolBar1.add(bpmField);
        jToolBar1.add(jSeparator3);

        verticalCheckBox.setText("Vertical");
        verticalCheckBox.setFocusable(false);
        verticalCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        verticalCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        verticalCheckBox.setMaximumSize(new java.awt.Dimension(82, 40));
        verticalCheckBox.setMinimumSize(new java.awt.Dimension(80, 40));
        verticalCheckBox.setPreferredSize(new java.awt.Dimension(82, 40));
        verticalCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(verticalCheckBox);
        jToolBar1.add(jSeparator4);

        cepstrumCheckBox.setText("Cepstrum");
        cepstrumCheckBox.setFocusable(false);
        cepstrumCheckBox.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        cepstrumCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        cepstrumCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cepstrumCheckBoxActionPerformed(evt);
            }
        });
        jToolBar1.add(cepstrumCheckBox);
        jToolBar1.add(jSeparator10);

        startButton.setText("START ON THE FLY");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(startButton);
        jToolBar1.add(jSeparator5);

        stopButton.setText("stop");
        stopButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                stopButtonMouseClicked(evt);
            }
        });
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(stopButton);
        jToolBar1.add(jSeparator9);

        testRecordButton.setText("Test Record & Play");
        testRecordButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testRecordButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(testRecordButton);
        jToolBar1.add(jSeparator6);

        clickedNoteLabel.setText("Which note is this?");
        jToolBar1.add(clickedNoteLabel);
        jToolBar1.add(jSeparator8);
        jToolBar1.add(coordinateLabel);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.Y_AXIS));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        sonographLabel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                sonographLabelMouseMoved(evt);
            }
        });
        sonographLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sonographLabelMouseClicked(evt);
            }
        });
        sonographLabel.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                sonographLabelComponentResized(evt);
            }
        });
        jScrollPane1.setViewportView(sonographLabel);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1415, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 534, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
        );

        jPanel2.add(jPanel1);

        tabPanel.setLayout(new javax.swing.BoxLayout(tabPanel, javax.swing.BoxLayout.Y_AXIS));

        //DefaultCaret caret = (DefaultCaret)tabTextArea.getCaret();
        //caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        tabTextArea.setColumns(200);
        tabTextArea.setFont(new java.awt.Font("Liberation Mono", 0, 12)); // NOI18N
        tabTextArea.setRows(12);
        tabScrollPane.setViewportView(tabTextArea);

        new SmartScroller( tabScrollPane );

        tabPanel.add(tabScrollPane);
        //DefaultCaret caret = (DefaultCaret)tabTextArea.getCaret();
        //caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        jPanel2.add(tabPanel);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1415, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 674, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        try {
            // TODO add your handling code here:
            longTrainRunning = false;
            tapButton.setEnabled(true);
            bpmField.setEnabled(true);
            verticalCheckBox.setEnabled(true);
            cepstrumCheckBox.setEnabled(true);
            fileWriter = new FileWriter(tabFile.getAbsoluteFile(), true);
            tabTextArea.write(fileWriter);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_stopButtonActionPerformed

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        tapButton.setEnabled(false);
        bpmField.setEnabled(false);
        verticalCheckBox.setEnabled(false);
        cepstrumCheckBox.setEnabled(false);

        try {
            // TODO add your handling code here:

            File tempFile = new File("tab.txt");
            boolean exists = tempFile.exists();

            if (exists) {
                tempFile.delete();
            }
            
            tabFile = new File("tab.txt");
            tabFile.createNewFile();

            fileWriter = null;
            longTrainRunning = true;

            BlockingQueue queue = new LinkedBlockingQueue();
            fourierOut = new PipedOutputStream();
            fourierIn = new PipedInputStream(fourierOut);

            sonographOut = new PipedOutputStream();
            sonographIn = new PipedInputStream(sonographOut);

            tabTransOut = new PipedOutputStream();
            tabTransIn = new PipedInputStream(tabTransOut);

            Thread t = new Thread(new TabTranscriptor(tabTransIn, queue));
            t.start();
            Thread.sleep(50);

            t = new Thread(new TabWriter(queue));
            t.start();
            Thread.sleep(50);

            t = new Thread(new Sonograph(sonographIn));
            t.start();
            Thread.sleep(50);

            t = new Thread(new FourierTransformer(fourierIn, sonographOut, tabTransOut));
            t.start();
            Thread.sleep(50);

            t = new Thread(new VoiceRecorder(fourierOut));
            t.start();

        } catch (InterruptedException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_startButtonActionPerformed

    private void testRecordButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testRecordButtonActionPerformed
        // TODO add your handling code here:
        mic.startMic();
        //startRecording();
    }//GEN-LAST:event_testRecordButtonActionPerformed

    private void bpmFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bpmFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_bpmFieldActionPerformed

    //final Timer timer = new Timer(10, null);
    private void tapButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tapButtonActionPerformed
        // TODO add your handling code here:
        long timeNow = System.currentTimeMillis();

        if (beatCount != 0 && timeNow - beats[beatCount - 1] > 5000) {
            //bpmField.setText(Long.toString( totalBeats / beatCount));
            beatCount = 0;
            totalBeats = 0;
            bpmField.setText("BPM");
            initializeBeats(beats);

        }

        beats[beatCount++] = timeNow;

        if (beatCount > 1) {
            long difference = beats[beatCount - 1] - beats[beatCount - 2];
            long bpm = 60000 / difference;
            totalBeats = totalBeats + bpm;
            // bpmField.setText(Long.toString( totalBeats / beatCount));

            bpmField.setText(Long.toString(bpm));

        }

    }//GEN-LAST:event_tapButtonActionPerformed

    private void sonographLabelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonographLabelMouseMoved
        if (verticalCheckBox.isSelected()) {
            int x = evt.getX();
            coordinateLabel.setText(Integer.toString(x));
        } else {
            int y = sonographLabel.getHeight() - evt.getY();
            coordinateLabel.setText(Integer.toString(y));
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_sonographLabelMouseMoved

    private void formComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentResized
        // TODO add your handling code here:
        if (!longTrainRunning) {
            sonographLabel.setIcon(null);
        }
    }//GEN-LAST:event_formComponentResized

    private void sonographLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sonographLabelMouseClicked
        int yCoordinate = Integer.parseInt(coordinateLabel.getText());
        Properties noteMap = TabTranscriptor.getNoteMap();
        int[] noteScale = TabTranscriptor.getNoteScale();
        Map reverseLookup = TabTranscriptor.getReverseLookup();
        Arrays.sort(noteScale);
        int notePosition = TabTranscriptor.findClosest(yCoordinate, noteScale);
        String note = (String) reverseLookup.get(Integer.toString(notePosition));
        clickedNoteLabel.setText(note);
    }//GEN-LAST:event_sonographLabelMouseClicked

    private void stopButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_stopButtonMouseClicked
        // TODO add your handling code here:
        notesStr = "";
    }//GEN-LAST:event_stopButtonMouseClicked

    private void verticalCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalCheckBoxActionPerformed
        // TODO add your handling code here:
        if (verticalCheckBox.isSelected()) {
            VIEW_LENGTH = sonographLabel.getWidth();
        } else {
            VIEW_LENGTH = sonographLabel.getHeight();
        }
    }//GEN-LAST:event_verticalCheckBoxActionPerformed

    private void sonographLabelComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_sonographLabelComponentResized
        // TODO add your handling code here:
        if (verticalCheckBox.isSelected()) {
            VIEW_LENGTH = sonographLabel.getWidth();
        } else {
            VIEW_LENGTH = sonographLabel.getHeight();
        }
    }//GEN-LAST:event_sonographLabelComponentResized

    private void cepstrumCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cepstrumCheckBoxActionPerformed
        // TODO add your handling code here:
        if (cepstrumCheckBox.isSelected()) {
            useCepstrum = true;
        } else {
            useCepstrum = false;
        }
    }//GEN-LAST:event_cepstrumCheckBoxActionPerformed

    private static void initializeBeats(long[] beats) {
        for (int i = 0; i < beats.length; i++) {
            beats[i] = 0L;
        }
    }

    public int getBpm() {
        return Integer.parseInt(bpmField.getText());
    }

    public boolean isVertical() {
        return verticalCheckBox.isSelected();
    }

    public JTextArea getTabTextArea() {
        return tabTextArea;
    }

    public int getColumnLimit() {
        return tabTextArea.getColumns();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws IOException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //SETUP THE SYSTEM.   
        tabFile = null;
        longTrainRunning = false;
        useCepstrum = false;
        notesStr = "<html>";
        lineBreak = "<br>";
        putLine = 0;

        tabSheet = "<html>" + "e------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "<br>"
                + "B------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "<br>"
                + "G------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "<br>"
                + "D------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "<br>"
                + "A------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------" + "<br>"
                + "E------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------";

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                mainFrame = new MainFrame();
                if (mainFrame.verticalCheckBox.isSelected()) {
                    VIEW_LENGTH = mainFrame.sonographLabel.getWidth();
                } else {
                    VIEW_LENGTH = mainFrame.sonographLabel.getHeight();
                }

                mainFrame.setVisible(true);
            }
        });

    }

    public int getVisualWidth() {
        return sonographLabel.getWidth();
    }

    public int getVisualHeight() {
        return sonographLabel.getHeight();
    }

    public void setSonograph(ImageIcon img) {
        sonographLabel.setIcon(img);
    }

    public static FileWriter fileWriter;
    public static File tabFile;
    public static String tabSheet;
    public static int putLine;
    public static String lineBreak;
    public static String notesStr;
    public static MainFrame mainFrame;
    public static volatile boolean longTrainRunning;
    public static int VIEW_LENGTH;
    public static boolean useCepstrum;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField bpmField;
    private javax.swing.JCheckBox cepstrumCheckBox;
    private javax.swing.JLabel clickedNoteLabel;
    private javax.swing.JLabel coordinateLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JToolBar.Separator jSeparator8;
    private javax.swing.JToolBar.Separator jSeparator9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JLabel sonographLabel;
    private javax.swing.JButton startButton;
    private javax.swing.JButton stopButton;
    private javax.swing.JPanel tabPanel;
    private javax.swing.JScrollPane tabScrollPane;
    private javax.swing.JTextArea tabTextArea;
    private javax.swing.JButton tapButton;
    private javax.swing.JButton testRecordButton;
    private javax.swing.JCheckBox verticalCheckBox;
    // End of variables declaration//GEN-END:variables
}
